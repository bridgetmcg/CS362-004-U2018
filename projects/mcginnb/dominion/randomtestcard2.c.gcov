        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1://Bridget McGinn
        -:    2://Note: I used the code framework from TestDrawCard.c to outline my random testing
        -:    3:
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:#include <stdlib.h>
        -:   12:#include <time.h>
        -:   13:#include <math.h>
        -:   14:
        -:   15:#define TESTCARD "great hall"
        -:   16:
        -:   17:
        -:   18:int greatHallEffectFail = 0;                                      //Define the failure counters as global variables
        -:   19:int greatHallActionFail = 0;
        -:   20:int greatHallCountFail = 0;
        -:   21:int drawCardFail = 0;
        -:   22:int discardFail = 0;
        -:   23:
        -:   24:void checkGreatHallCard(int p, struct gameState *post) {
        -:   25:  struct gameState pre;
    11000:   26:  memcpy (&pre, post, sizeof(struct gameState));
        -:   27:  int r, m, j;
    11000:   28:  int bonus = 0;
    11000:   29:  r = cardEffect(great_hall, 0, 0, 0, post, 0, &bonus);           //Call cardEffect on the post gamestate
    11000:   30:  m = drawCard(p, &pre);                                          //Draw one card as expected on the pre gamestate
    11000:   31:  j = discardCard(0, p, &pre, 0);                                 //Discard one card as expected on the pre gamestate
    11000:   32:  pre.numActions++;                                               //Increase the number of actions as expected on the pre gamestate
    11000:   33:  if (m==-1)
        -:   34:  {
    #####:   35:      drawCardFail++;                                             //If the drawCard function was the issue
    #####:   36:  }
    11000:   37:  if(j==-1)
        -:   38:  {
    #####:   39:      discardFail++;                                              //If the discard function was the issue
    #####:   40:  }
    11000:   41:  if (r!=0)
        -:   42:  {
    #####:   43:      greatHallEffectFail++;
    #####:   44:  }
    11000:   45:  if(pre.numActions != post -> numActions)                        //If the number of actions was the issue
        -:   46:  {
    #####:   47:      greatHallActionFail++;
    #####:   48:  }
    22000:   49:  if (pre.handCount[p] != post->handCount[p] || pre.deckCount[p] != post->deckCount[p])
        -:   50:  {
    #####:   51:      greatHallCountFail++;                                       //If the card count was the issue
    #####:   52:  }
        -:   53:
    11000:   54:}
        -:   55:
        -:   56:int main () {
        -:   57:
        2:   58:  printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   59:
        -:   60:  int i, n, p;
        -:   61:  struct gameState G;
        2:   62:  printf ("RANDOM TESTS running 10000 times.\n");
        2:   63:  SelectStream(2);
        2:   64:  PutSeed(3);
        -:   65:
    22004:   66:  for (n = 0; n < 10000; n++) {                                    //Set up 1000 forms of the gamestate
578622000:   67:    for (i = 0; i < sizeof(struct gameState); i++) {
289300000:   68:      ((char*)&G)[i] = floor(Random() * 256);
289300000:   69:    }
    11000:   70:    p = floor(Random() * MAX_PLAYERS);
    11000:   71:    G.deckCount[p] = floor(Random() * MAX_DECK);
    11000:   72:    G.discardCount[p] = floor(Random() * MAX_DECK);
    11000:   73:    G.handCount[p] = floor(Random() * MAX_HAND);
    11000:   74:    G.playedCardCount = floor(Random() * MAX_DECK -1);
    11000:   75:    G.whoseTurn = p;
    11000:   76:    G.numActions = floor(Random() * 5);
    11000:   77:    checkGreatHallCard(p, &G);                                    //Call the check function
    11000:   78:  }
        -:   79:
        2:   80:  if (greatHallCountFail + greatHallEffectFail + greatHallActionFail + discardFail + drawCardFail == 0)
        -:   81:  {
        2:   82:    printf("ALL RANDOM TESTS PASSED\n");                          //Display the results as passed if there are no errors
        2:   83:  }
        -:   84:  else 
        -:   85:  {
    #####:   86:    printf("TEST FAILURES\n");
    #####:   87:    printf("greatHallCountFails = %d \n", greatHallCountFail);
    #####:   88:    printf("greatHallEffectFails = %d \n", greatHallEffectFail);  
    #####:   89:    printf("greatHallActionFails = %d \n", greatHallActionFail);
    #####:   90:    printf("drawCardFail = %d \n", drawCardFail);
    #####:   91:    printf("discardFail = %d \n", discardFail);
        -:   92:    
        -:   93:  }
        2:   94:  return 0;
        -:   95:}
