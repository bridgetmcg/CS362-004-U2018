        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Code framework comes form cardtest4.c and playdom.c in order to set the game up as both 
        -:    2:// a basic initialized game, and a game which has had several turns. 
        -:    3:// Purpose: This tests the shuffleTest() function
        -:    4:// Name: Bridget McGinn
        -:    5:// CS362
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:
function main called 1 returned 100% blocks executed 60%
        -:   15:int main() {
        -:   16:
        -:   17:    int i, j, m;
        1:   18:    int seed = 1000;
        1:   19:    int numPlayers = 2;
        1:   20:    int thisPlayer = 0;
        -:   21:	struct gameState G, testG, otherTest;
        1:   22:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   23:			sea_hag, tribute, smithy, council_room};
        -:   24:
        1:   25:	initializeGame(numPlayers, k, seed, &G);
        1:   26:	memcpy(&otherTest, &G, sizeof(struct gameState));
        1:   27:	int money = 0;
        1:   28:  	int smithyPos = -1;
        1:   29: 	int adventurerPos = -1;
        -:   30:
        1:   31:  	int numSmithies = 0;
        1:   32:  	int numAdventurers = 0;
        -:   33:
        -:   34:  	
        -:   35:  	//TESTING
        -:   36:
       12:   37:  	for (j = 0; j < 5; j++) {
branch  0 taken 83%
branch  1 taken 17%
        5:   38:    money = 0;
        5:   39:    smithyPos = -1;
        5:   40:    adventurerPos = -1;
       60:   41:    for (i = 0; i < numHandCards(&G); i++) {
branch  0 taken 83%
branch  1 taken 17%
       25:   42:      if (handCard(i, &G) == copper)
branch  0 taken 68%
branch  1 taken 32%
       17:   43:    money++;
        8:   44:      else if (handCard(i, &G) == silver)
branch  0 taken 13%
branch  1 taken 88%
        1:   45:    money += 2;
        7:   46:      else if (handCard(i, &G) == gold)
branch  0 taken 0%
branch  1 taken 100%
    #####:   47:    money += 3;
        7:   48:      else if (handCard(i, &G) == smithy)
branch  0 taken 0%
branch  1 taken 100%
    #####:   49:    smithyPos = i;
        7:   50:      else if (handCard(i, &G) == adventurer)
branch  0 taken 0%
branch  1 taken 100%
    #####:   51:    adventurerPos = i;
       25:   52:    }
        -:   53:
        5:   54:    if (whoseTurn(&G) == 0) {
branch  0 taken 60%
branch  1 taken 40%
        3:   55:      if (smithyPos != -1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   56:        playCard(smithyPos, -1, -1, -1, &G);
    #####:   57:        money = 0;
    #####:   58:        i=0;
    #####:   59:        while(i<numHandCards(&G)){
branch  0 never executed
branch  1 never executed
    #####:   60:          if (handCard(i, &G) == copper){
branch  0 never executed
branch  1 never executed
    #####:   61:            playCard(i, -1, -1, -1, &G);
    #####:   62:            money++;
    #####:   63:          }
    #####:   64:          else if (handCard(i, &G) == silver){
branch  0 never executed
branch  1 never executed
    #####:   65:            playCard(i, -1, -1, -1, &G);
    #####:   66:            money += 2;
    #####:   67:          }
    #####:   68:          else if (handCard(i, &G) == gold){
branch  0 never executed
branch  1 never executed
    #####:   69:            playCard(i, -1, -1, -1, &G);
    #####:   70:            money += 3;
    #####:   71:          }
    #####:   72:          i++;
        -:   73:        }
    #####:   74:      }
        -:   75:
        3:   76:      if (money >= 8) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   77:        buyCard(province, &G);
    #####:   78:      }
        3:   79:      else if (money >= 6) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   80:        buyCard(gold, &G);
    #####:   81:      }
        5:   82:      else if ((money >= 4) && (numSmithies < 2)) {
branch  0 taken 67%
branch  1 taken 33%
branch  2 taken 100%
branch  3 taken 0%
        -:   83:  
        2:   84:        buyCard(smithy, &G);
        2:   85:        numSmithies++;
        2:   86:      }
        1:   87:      else if (money >= 3) {
branch  0 taken 100%
branch  1 taken 0%
        -:   88:
        1:   89:        buyCard(silver, &G);
        1:   90:      }
        -:   91:
        3:   92:      endTurn(&G);
        3:   93:    }
        -:   94:    else {
        2:   95:      if (adventurerPos != -1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:   96:        playCard(adventurerPos, -1, -1, -1, &G);
    #####:   97:        money = 0;
    #####:   98:        i=0;
    #####:   99:        while(i<numHandCards(&G)){
branch  0 never executed
branch  1 never executed
    #####:  100:          if (handCard(i, &G) == copper){
branch  0 never executed
branch  1 never executed
    #####:  101:            playCard(i, -1, -1, -1, &G);
    #####:  102:            money++;
    #####:  103:          }
    #####:  104:          else if (handCard(i, &G) == silver){
branch  0 never executed
branch  1 never executed
    #####:  105:            playCard(i, -1, -1, -1, &G);
    #####:  106:            money += 2;
    #####:  107:          }
    #####:  108:          else if (handCard(i, &G) == gold){
branch  0 never executed
branch  1 never executed
    #####:  109:            playCard(i, -1, -1, -1, &G);
    #####:  110:            money += 3;
    #####:  111:          }
    #####:  112:          i++;
        -:  113:        }
    #####:  114:      }
        2:  115:      if (money >= 8) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  116:        buyCard(province, &G);
    #####:  117:      }
        2:  118:      else if ((money >= 6) && (numAdventurers < 2)) {
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  119:       
    #####:  120:        buyCard(adventurer, &G);
    #####:  121:        numAdventurers++;
        2:  122:      }else if (money >= 6){
branch  0 taken 0%
branch  1 taken 100%
    #####:  123:	    buyCard(gold, &G);
    #####:  124:        }
        2:  125:      else if (money >= 3){
branch  0 taken 100%
branch  1 taken 0%
        2:  126:	    buyCard(silver, &G);
        2:  127:      }
        -:  128: 
        -:  129:
        2:  130:      endTurn(&G);
        -:  131:    }
        5:  132:  } 
        1:  133:  printf("----------------- Testing shuffle(): ----------------\n");
        -:  134:
        -:  135:
        1:  136:	printf("\nTEST 1: check that the cards from the player's deck are in a different order.\n");
        1:  137:	printf("Cards in deck before: ");
       16:  138:	for (m=0; m<G.deckCount[thisPlayer]; m++)
branch  0 taken 88%
branch  1 taken 13%
        -:  139:	{
        7:  140:		printf("%d", G.deck[thisPlayer][m]);
        7:  141:		printf(" ");
        7:  142:	}
        1:  143:	printf("\n");
        1:  144:	printf("Cards in hand before: ");
        2:  145:	for (m=0; m<G.handCount[thisPlayer]; m++)
branch  0 taken 0%
branch  1 taken 100%
        -:  146:	{
    #####:  147:		printf("%d", G.hand[thisPlayer][m]);
    #####:  148:		printf(" ");
    #####:  149:	}
        1:  150:	printf("\n");
        1:  151:	printf("Cards in discard before: ");
       14:  152:	for (m=0; m<G.discardCount[thisPlayer]; m++)
branch  0 taken 86%
branch  1 taken 14%
        -:  153:	{
        6:  154:		printf("%d", G.discard[thisPlayer][m]);
        6:  155:		printf(" ");
        6:  156:	}
        1:  157:	printf("\n");
        -:  158:
        -:  159:	//Copy the structure of the game to the TestG structure
        1:  160:	memcpy(&testG, &G, sizeof(struct gameState));
        1:  161:	shuffle(thisPlayer, &testG);
        -:  162:	
        -:  163:	//Show the cards afterward
        1:  164:	printf("Cards in deck after: ");
        1:  165:	i = 0;
       16:  166:	for (m=0; m<testG.deckCount[thisPlayer]; m++)
branch  0 taken 88%
branch  1 taken 13%
        -:  167:	{
        7:  168:		printf("%d", testG.deck[thisPlayer][m]);
        7:  169:		printf(" ");
        7:  170:		if (testG.deck[thisPlayer][m]!= G.deck[thisPlayer][m])
branch  0 taken 71%
branch  1 taken 29%
        -:  171:		{
        5:  172:			i = 1;
        5:  173:		}
        7:  174:	}
        1:  175:	printf("\n");
        1:  176:	printf("Cards in hand after: ");
        2:  177:	for (m=0; m<testG.handCount[thisPlayer]; m++)
branch  0 taken 0%
branch  1 taken 100%
        -:  178:	{
    #####:  179:		printf("%d", testG.hand[thisPlayer][m]);
    #####:  180:		printf(" ");
    #####:  181:	}
        1:  182:	printf("\n");
        1:  183:	printf("Cards in discard after: ");
       14:  184:	for (m=0; m<testG.discardCount[thisPlayer]; m++)
branch  0 taken 86%
branch  1 taken 14%
        -:  185:	{
        6:  186:		printf("%d", testG.discard[thisPlayer][m]);
        6:  187:		printf(" ");
        6:  188:	}
        1:  189:	printf("\n");
        -:  190:	
        2:  191:	if (i == 1 && testG.deckCount[thisPlayer] == G.deckCount[thisPlayer])
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
        -:  192:	{
        1:  193:		printf("Deck count is the same before and after but the order is changed PASS\n");
        1:  194:	}
        -:  195:	else 
        -:  196:	{
    #####:  197:		printf("Either deck count is not the same before and after or the order has not changed FAIL\n");
        -:  198:	}
        -:  199:
        1:  200:	printf("\nTEST 2: Check that the number of cards in the deck after is the same that were in the deck before.\n");
        1:  201:	memcpy(&testG, &G, sizeof(struct gameState));
        1:  202:	shuffle(thisPlayer, &testG);
        -:  203:
        1:  204:	printf("Number of cards in deck before: %d\n", testG.deckCount[thisPlayer]);
        1:  205:	printf("Number of cards in deck after: %d\n", G.deckCount[thisPlayer]);
        -:  206:
        1:  207:	if (testG.deckCount[thisPlayer] == G.deckCount[thisPlayer])
branch  0 taken 100%
branch  1 taken 0%
        -:  208:	{
        1:  209:		printf("Cards equal PASS.\n");
        1:  210:	}
        -:  211:	else
        -:  212:	{
    #####:  213:		printf("Cards are not equal FAIL.\n");
        -:  214:	}
        -:  215:
        1:  216:	printf("\nTEST 3: check that the number and order of another player's card have not been changed.\n");
        -:  217:	
        1:  218:	memcpy(&testG, &G, sizeof(struct gameState));
        1:  219:	shuffle(thisPlayer, &testG);
        3:  220:	if (testG.deckCount[1] == G.deckCount[1] && testG.handCount[1] == G.handCount[1] && testG.discardCount[1] == G.discardCount[1])
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 100%
branch  5 taken 0%
        -:  221:	{
        1:  222:		printf("Cards of other player equal PASS.\n");
        1:  223:	}
        -:  224:	else
        -:  225:	{
    #####:  226:		printf("Cards of other player not equal FAIL.\n");
        -:  227:	}
        -:  228:
        1:  229:	printf("\nTEST 4: check that if there are no cards in the deck, that shuffle returns -1.\n");
        -:  230:
        8:  231:	for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25%
        3:  232:    money = 0;
        3:  233:    smithyPos = -1;
        3:  234:    adventurerPos = -1;
       36:  235:    for (i = 0; i < numHandCards(&otherTest); i++) {
branch  0 taken 83%
branch  1 taken 17%
       15:  236:      if (handCard(i, &otherTest) == copper)
branch  0 taken 67%
branch  1 taken 33%
       10:  237:    money++;
        5:  238:      else if (handCard(i, &otherTest) == silver)
branch  0 taken 0%
branch  1 taken 100%
    #####:  239:    money += 2;
        5:  240:      else if (handCard(i, &otherTest) == gold)
branch  0 taken 0%
branch  1 taken 100%
    #####:  241:    money += 3;
        5:  242:      else if (handCard(i, &otherTest) == smithy)
branch  0 taken 0%
branch  1 taken 100%
    #####:  243:    smithyPos = i;
        5:  244:      else if (handCard(i, &otherTest) == adventurer)
branch  0 taken 0%
branch  1 taken 100%
    #####:  245:    adventurerPos = i;
       15:  246:    }
        -:  247:
        3:  248:    if (whoseTurn(&otherTest) == 0) {
branch  0 taken 67%
branch  1 taken 33%
        2:  249:      if (smithyPos != -1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  250:        playCard(smithyPos, -1, -1, -1, &otherTest);
    #####:  251:        money = 0;
    #####:  252:        i=0;
    #####:  253:        while(i<numHandCards(&otherTest)){
branch  0 never executed
branch  1 never executed
    #####:  254:          if (handCard(i, &otherTest) == copper){
branch  0 never executed
branch  1 never executed
    #####:  255:            playCard(i, -1, -1, -1, &otherTest);
    #####:  256:            money++;
    #####:  257:          }
    #####:  258:          else if (handCard(i, &otherTest) == silver){
branch  0 never executed
branch  1 never executed
    #####:  259:            playCard(i, -1, -1, -1, &otherTest);
    #####:  260:            money += 2;
    #####:  261:          }
    #####:  262:          else if (handCard(i, &otherTest) == gold){
branch  0 never executed
branch  1 never executed
    #####:  263:            playCard(i, -1, -1, -1, &otherTest);
    #####:  264:            money += 3;
    #####:  265:          }
    #####:  266:          i++;
        -:  267:        }
    #####:  268:      }
        -:  269:
        2:  270:      if (money >= 8) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  271:        buyCard(province, &otherTest);
    #####:  272:      }
        2:  273:      else if (money >= 6) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  274:        buyCard(gold, &otherTest);
    #####:  275:      }
        3:  276:      else if ((money >= 4) && (numSmithies < 2)) {
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 100%
        -:  277:  
    #####:  278:        buyCard(smithy, &otherTest);
    #####:  279:        numSmithies++;
    #####:  280:      }
        2:  281:      else if (money >= 3) {
branch  0 taken 100%
branch  1 taken 0%
        -:  282:
        2:  283:        buyCard(silver, &otherTest);
        2:  284:      }
        -:  285:
        2:  286:      endTurn(&otherTest);
        2:  287:    }
        -:  288:    else {
        1:  289:      if (adventurerPos != -1) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  290:        playCard(adventurerPos, -1, -1, -1, &otherTest);
    #####:  291:        money = 0;
    #####:  292:        i=0;
    #####:  293:        while(i<numHandCards(&G)){
branch  0 never executed
branch  1 never executed
    #####:  294:          if (handCard(i, &otherTest) == copper){
branch  0 never executed
branch  1 never executed
    #####:  295:            playCard(i, -1, -1, -1, &otherTest);
    #####:  296:            money++;
    #####:  297:          }
    #####:  298:          else if (handCard(i, &otherTest) == silver){
branch  0 never executed
branch  1 never executed
    #####:  299:            playCard(i, -1, -1, -1, &otherTest);
    #####:  300:            money += 2;
    #####:  301:          }
    #####:  302:          else if (handCard(i, &otherTest) == gold){
branch  0 never executed
branch  1 never executed
    #####:  303:            playCard(i, -1, -1, -1, &otherTest);
    #####:  304:            money += 3;
    #####:  305:          }
    #####:  306:          i++;
        -:  307:        }
    #####:  308:      }
        1:  309:      if (money >= 8) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  310:        buyCard(province, &otherTest);
    #####:  311:      }
        1:  312:      else if ((money >= 6) && (numAdventurers < 2)) {
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  313:       
    #####:  314:        buyCard(adventurer, &otherTest);
    #####:  315:        numAdventurers++;
        1:  316:      }else if (money >= 6){
branch  0 taken 0%
branch  1 taken 100%
    #####:  317:	    buyCard(gold, &otherTest);
    #####:  318:        }
        1:  319:      else if (money >= 3){
branch  0 taken 100%
branch  1 taken 0%
        1:  320:	    buyCard(silver, &otherTest);
        1:  321:      }
        -:  322: 
        -:  323:
        1:  324:      endTurn(&otherTest);
        -:  325:    }
        3:  326:  } 
        -:  327:
        1:  328:	memcpy(&testG, &otherTest, sizeof(struct gameState));
        1:  329:	j = shuffle(thisPlayer, &testG);
        1:  330:	if (j == -1)
branch  0 taken 100%
branch  1 taken 0%
        -:  331:	{
        1:  332:		printf("Shuffle returns -1 if there are no cards in the deck PASS.\n\n");
        1:  333:	}
        -:  334:	else
        -:  335:	{
    #####:  336:		printf("Shuffle does not return -1 if there are not cards in the deck FAIL.\n");
        -:  337:	}
        -:  338:
        1:  339:	return 0;
        -:  340:}
        -:  341:
