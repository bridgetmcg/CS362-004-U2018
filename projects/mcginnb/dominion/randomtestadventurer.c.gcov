        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1://Bridget McGinn
        -:    2://Note: I used the code framework from TestDrawCard.c to outline my random testing
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:#include <stdlib.h>
        -:   11:#include <time.h>
        -:   12:#include <math.h>
        -:   13:
        -:   14:#define TESTCARD "adventurer"
        -:   15:int AdventurerTreasureFail = 0;                                     //Define the failure counters as global variables
        -:   16:int AdventurerCardCountFail = 0;
        -:   17:int AdventurerFail = 0;
        -:   18:int drawCardFail = 0;
        -:   19:
        -:   20:
        -:   21:void checkAdventureCard(int p, struct gameState *post) {
        -:   22:  struct gameState pre;
     4000:   23:  memcpy (&pre, post, sizeof(struct gameState));
        -:   24:  int r,m, i, cardDrawn, cardHolder;
     4000:   25:  int z = 0;
     4000:   26:  int bonus = 0;
     4000:   27:  int drawnTreasure = 0;                                            //Define the variables used in the adventure card effect
     4000:   28:  int PreTreasure = 0;
     4000:   29:  int PostTreasure = 0;                                             //Define counter variables for checking
        -:   30:  int tempHand[MAX_HAND];
     4000:   31:  r = cardEffect(adventurer, 0, 0, 0, post, 0, &bonus);
   980352:   32:  while(drawnTreasure < 2)                                          //Use the correct adventurer code
        -:   33:  {
   486176:   34:    if (pre.deckCount[p] < 1) {
    #####:   35:      shuffle(p,&pre);}
   486176:   36:    m = drawCard(p, &pre);
   486176:   37:    cardDrawn = pre.hand[p][pre.handCount[p]-1];
  1450552:   38:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:   39:    {
     8000:   40:      drawnTreasure++;
     8000:   41:    }
        -:   42:    else
        -:   43:    {
   478176:   44:      tempHand[z]=cardDrawn;                                       //Add non treasure cards to a tempHand to be discarded
   478176:   45:      pre.handCount[p]--;
   478176:   46:      z++;
        -:   47:    }
        -:   48:  }  
   964352:   49:  while(z-1 >=0){
   478176:   50:    pre.discard[p][pre.discardCount[p]++]=tempHand[z-1];            //Discard tempHand
   478176:   51:    z--;
        -:   52:  }
        -:   53: 
     4000:   54:  if (m==-1)
        -:   55:  {   
    #####:   56:      drawCardFail++;                                               //If drawCard() was the issue
    #####:   57:  }
     4000:   58:  if (r!=0)
        -:   59:  {
    #####:   60:      AdventurerFail++;             
    #####:   61:  }
        -:   62:
  1972856:   63:  for (i = 0; i < post->handCount[p]; i++) {                        //Count the pre and post gamestate treasure cards
   982428:   64:    cardHolder = post->hand[p][i];
  2939308:   65:    if (cardHolder == copper || cardHolder == silver || cardHolder == gold) {
     8000:   66:        PostTreasure++;
     8000:   67:      }
   982428:   68:  }
        -:   69: 
  1972856:   70:  for (i = 0; i < pre.handCount[p]; i++) {
   982428:   71:    cardHolder =pre.hand[p][i];
  2939308:   72:    if (cardHolder == copper || cardHolder == silver || cardHolder == gold) {
     8000:   73:        PreTreasure++;
     8000:   74:    }
   982428:   75:  }
        -:   76:
     4000:   77:  if(PostTreasure != PreTreasure)                                   //Deterine if they are equal
        -:   78:  {
    #####:   79:    AdventurerTreasureFail++;
    #####:   80:  }
    12000:   81:  if (pre.handCount[p] != post->handCount[p] || pre.deckCount[p] != post->deckCount[p] || pre.discardCount[p] != post -> discardCount[p])
        -:   82:  {
    #####:   83:      AdventurerCardCountFail++;                                    //If the card count is the issue
    #####:   84:  }
     4000:   85:}
        -:   86:
        -:   87:int main () {
        -:   88:
        4:   89:  printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   90:
        -:   91:  int i, n, p, treasures;
        -:   92:  struct gameState G;
        4:   93:  int treasureCards[] = {copper, silver, gold};
        -:   94:
        4:   95:  printf ("RANDOM TESTS running 1000 times.\n");
        4:   96:  SelectStream(2);
        4:   97:  PutSeed(3);
        -:   98:
     8008:   99:  for (n = 0; n < 1000; n++) {                                       //Set up 1000 forms of the gamestate
210408000:  100:    for (i = 0; i < sizeof(struct gameState); i++) {
105200000:  101:      ((char*)&G)[i] = floor(Random() * 256);
105200000:  102:    }
     4000:  103:    p = floor(Random() * 4);
     4000:  104:    G.deckCount[p] = floor(Random() * ((MAX_DECK- 3) + 1) + 3);
     4000:  105:    treasures = floor(Random() * ((G.deckCount[p] - 3) + 1) + 3);
     4000:  106:    G.discardCount[p] = 0;
     4000:  107:    G.handCount[p] = floor(Random() * ((MAX_HAND - 3) + 1) + 3);
        -:  108:
  1029968:  109:    for (i = 0; i < treasures; i++) {                                //Ensure that there are at least 3 treasure cards
   510984:  110:        G.deck[p][i] = treasureCards[rand() % 3];
   510984:  111:      }
     4000:  112:    G.playedCardCount = floor(Random() * MAX_DECK -1);
     4000:  113:    G.whoseTurn = p;
        -:  114:    
     4000:  115:    checkAdventureCard(p, &G);                                       //Call the check function
     4000:  116:  }
        -:  117:
        4:  118:  if (AdventurerTreasureFail + AdventurerCardCountFail + AdventurerFail + drawCardFail == 0)
        -:  119:  {
        4:  120:    printf("ALL RANDOM TESTS PASSED\n");                            //Display the results as passed if there are no errors
        4:  121:  }
        -:  122:  else 
        -:  123:  {
    #####:  124:    printf("TEST FAILURES\n");
    #####:  125:    printf("Adventurer Treasure Fails = %d \n", AdventurerTreasureFail);
    #####:  126:    printf("Adventurer Card Count Fails = %d \n", AdventurerCardCountFail);  
    #####:  127:    printf("Adventurer Function Fails = %d \n", AdventurerFail);
    #####:  128:    printf("Draw Card Fails = %d \n", drawCardFail);
        -:  129:    
        -:  130:  }
        4:  131:  return 0;
        -:  132:}
