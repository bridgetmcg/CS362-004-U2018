        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1://Bridget McGinn
        -:    2://Note: I used the code framework from TestDrawCard.c to outline my random testing
        -:    3:
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:#include <stdlib.h>
        -:   12:#include <time.h>
        -:   13:#include <math.h>
        -:   14:
        -:   15:#define TESTCARD "smithy"
        -:   16:
        -:   17:int smithyFail = 0;												//Define the failure counters as global variables
        -:   18:int drawCardFail = 0;
        -:   19:int discardFail = 0;
        -:   20:
        -:   21:void checkSmithyCard(int p, struct gameState *post) {
        -:   22:  struct gameState pre;
     2000:   23:  memcpy (&pre, post, sizeof(struct gameState));
        -:   24:  int r, m, j;
     2000:   25:  int bonus = 0;
     2000:   26:  r = cardEffect(smithy, 0, 0, 0, post, 0, &bonus);				//Call cardEffect on the post gamestate
     2000:   27:  m = drawCard(p, &pre);										//Draw three cards as expected on the pre gamestate
     2000:   28:  m = drawCard(p, &pre);
     2000:   29:  m = drawCard(p, &pre);
     2000:   30:  j = discardCard(0, p, &pre, 0);								//Discard one card as expected on the pre gamestate
        -:   31:
     2000:   32:  if (m==-1)
        -:   33:  {
    #####:   34:  		drawCardFail++;											//If the drawCard function was the issue
    #####:   35:  }
     2000:   36:  if(j==-1)
        -:   37:  {
    #####:   38:  		discardFail++;											//If the discard funciton was the issue
    #####:   39:  }
     2000:   40:  if (r!=0)
        -:   41:  {
    #####:   42:  		smithyFail++;									
    #####:   43:  }
        -:   44: 
     2000:   45:  if (pre.handCount[p] != post->handCount[p] || pre.deckCount[p] != post->deckCount[p])
        -:   46:  {
     2000:   47:  		smithyFail++;											//Check if the three cards were correctly added
     2000:   48:  }
        -:   49:
     2000:   50:}
        -:   51:
        -:   52:int main () {
        -:   53:
        2:   54:  printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   55:
        -:   56:  int i, n, p;
        -:   57:  struct gameState G;
        2:   58:  printf ("RANDOM TESTS running 1000 times.\n");
        2:   59:  SelectStream(2);
        2:   60:  PutSeed(3);
        -:   61:
     4004:   62:  for (n = 0; n < 1000; n++) {									//Set up 1000 forms of the gamestate
105204000:   63:    for (i = 0; i < sizeof(struct gameState); i++) {
 52600000:   64:      ((char*)&G)[i] = floor(Random() * 256);
 52600000:   65:    }
     2000:   66:    p = floor(Random() * MAX_PLAYERS);
     2000:   67:    G.deckCount[p] = floor(Random() * MAX_DECK);
     2000:   68:    G.discardCount[p] = floor(Random() * MAX_DECK);
     2000:   69:    G.handCount[p] = floor(Random() * MAX_HAND);
     2000:   70:    G.playedCardCount = floor(Random() * MAX_DECK -1);
     2000:   71:    G.whoseTurn = p;
     2000:   72:    checkSmithyCard(p, &G);										//Call the check function
     2000:   73:  }
        -:   74:
        2:   75:  if (smithyFail + discardFail + drawCardFail == 0)				//Display the results as passed if there are no errors
        -:   76:  {
    #####:   77:  	printf("ALL RANDOM TESTS PASSED\n");
    #####:   78:  }
        -:   79:  else 
        -:   80:  {
        2:   81:  	printf("TEST FAILURES\n");
        2:   82:  	printf("smithyFails = %d \n", smithyFail);
        2:   83:  	printf("drawCardFail = %d \n", drawCardFail);
        2:   84:  	printf("discardFail = %d \n", discardFail);
        -:   85:  	
        -:   86:  }
        2:   87:  return 0;
        -:   88:}
