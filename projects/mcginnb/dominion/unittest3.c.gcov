        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Code framework comes form cardtest4.c and playdom.c in order to set the game up as both 
        -:    2:// a basic initialized game, and a game which has had several turns. 
        -:    3:// Purpose: This tests the isGameOver() function
        -:    4:// Name: Bridget McGinn
        -:    5:// CS362
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:
function main called 1 returned 100% blocks executed 88%
        -:   15:int main() {
        -:   16:
        -:   17:  int i, j, m;
        1:   18:  int seed = 30;
        1:   19:  int numPlayers = 2;
        -:   20:
        -:   21:	struct gameState G, testG, otherTest;
        1:   22:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   23:	sea_hag, tribute, smithy, council_room};
        -:   24:
        1:   25:	initializeGame(numPlayers, k, seed, &G);
        -:   26:
        -:   27:  	
        -:   28:  //TESTING
        1:   29:  printf("----------------- Testing isGameOver(): ----------------\n");
        1:   30:  printf("\nTEST 1: check that isGameOver will work if there are no Provinces.\n");
        1:   31:  G.supplyCount[3] = 0;
        1:   32:  printf("Provinces: %d\n",G.supplyCount[3]);
        1:   33:  m=0;
       52:   34:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:   35:  {
       25:   36:    if (G.supplyCount[i] == 0)
branch  0 taken 4%
branch  1 taken 96%
        -:   37:     {
        1:   38:       m++;
        1:   39:     }
       25:   40:  }
        1:   41:  printf("Number of supplies with 0: %d\n", m);
        -:   42:
        1:   43:  if(isGameOver(&G) == 1)
branch  0 taken 100%
branch  1 taken 0%
        -:   44:  {
        1:   45:    printf("TEST 1 = PASS\n");
        1:   46:  }
        -:   47:  else
        -:   48:  {
    #####:   49:    printf("TEST 1 = FAIL\n");
        -:   50:  }
        -:   51:
        1:   52:  printf("\nTEST 2: check that isGameOver will work if there are three cards with 0 left.\n");
        1:   53:  initializeGame(numPlayers, k, seed, &otherTest);
        1:   54:  j=8;
        1:   55:  printf("Provinces: %d\n", otherTest.supplyCount[3]);
        -:   56:
        8:   57:  for (i = 8; i < 11; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:   58:  {
        3:   59:    otherTest.supplyCount[i] = 0;
        3:   60:  }
        1:   61:  m =0;
       52:   62:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:   63:  {
       25:   64:    if (otherTest.supplyCount[i] == 0)
branch  0 taken 12%
branch  1 taken 88%
        -:   65:     {
        3:   66:       m++;
        3:   67:     }
       25:   68:  }
        1:   69:printf("Number of supplies with 0: %d\n", m);
        1:   70:if(isGameOver(&otherTest) == 1)
branch  0 taken 100%
branch  1 taken 0%
        -:   71:  {
        1:   72:    printf("TEST 2 = PASS\n");
        1:   73:  }
        -:   74:  else
        -:   75:  {
    #####:   76:    printf("TEST 2 = FAIL\n");
        -:   77:  }
        -:   78:
        1:   79:printf("\nTEST 3: check that isGameOver will return 0 if neither of the criteria are met.\n");
        1:   80:initializeGame(numPlayers, k, seed, &testG);
        1:   81:if(isGameOver(&testG) == 0)
branch  0 taken 100%
branch  1 taken 0%
        -:   82:  {
        1:   83:    printf("TEST 3 = PASS\n\n");
        1:   84:  }
        -:   85:  else
        -:   86:  {
    #####:   87:    printf("TEST 3 = FAIL\n\n");
        -:   88:  }
        1:   89:return 0;
        -:   90:}
        -:   91:
        -:   92:
