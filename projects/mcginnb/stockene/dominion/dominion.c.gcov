        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:void smithyfunct(int currentPlayer, struct gameState *state, int handPos);
        -:    9:void adventurerfunct(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int z);
        -:   10:void villagefunct(int currentPlayer, struct gameState *state, int handPos);
        -:   11:void baronfunct(int currentPlayer, struct gameState *state, int handPos, int choice1);
        -:   12:void minionfunct(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2);
        -:   13:
function compare called 2386 returned 100% blocks executed 100%
        -:   14:int compare(const void* a, const void* b) {
     2386:   15:  if (*(int*)a > *(int*)b)
branch  0 taken 32%
branch  1 taken 68%
      769:   16:    return 1;
     1617:   17:  if (*(int*)a < *(int*)b)
branch  0 taken 49%
branch  1 taken 51%
      800:   18:    return -1;
      817:   19:  return 0;
     2386:   20:}
        -:   21:
function newGame called 0 returned 0% blocks executed 0%
        -:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
function initializeGame called 9 returned 100% blocks executed 83%
        -:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
        9:   50:  SelectStream(1);
        9:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
       18:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
        9:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
      198:   63:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   64:    {
     1980:   65:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   66:        {
     1710:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
      900:   71:        }
       90:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
        9:   79:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   80:    {
        9:   81:      state->supplyCount[curse] = 10;
        9:   82:    }
    #####:   83:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 20;
    #####:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
        9:   93:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   94:    {
        9:   95:      state->supplyCount[estate] = 8;
        9:   96:      state->supplyCount[duchy] = 8;
        9:   97:      state->supplyCount[province] = 8;
        9:   98:    }
        -:   99:  else
        -:  100:    {
    #####:  101:      state->supplyCount[estate] = 12;
    #####:  102:      state->supplyCount[duchy] = 12;
    #####:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
        9:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  108:  state->supplyCount[silver] = 40;
        9:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
      378:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  113:    {
     2970:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  115:	{
     1395:  116:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
      180:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  120:		{
    #####:  121:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  122:		    state->supplyCount[i] = 8; 
    #####:  123:		  }
    #####:  124:		  else{ state->supplyCount[i] = 12; }
    #####:  125:		}
        -:  126:	      else
        -:  127:		{
       90:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
       90:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
     1305:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
     1305:  136:	}
        -:  137:
      180:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       54:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  145:    {
       18:  146:      state->deckCount[i] = 0;
      144:  147:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  148:	{
       54:  149:	  state->deck[i][j] = estate;
       54:  150:	  state->deckCount[i]++;
       54:  151:	}
      288:  152:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  153:	{
      126:  154:	  state->deck[i][j] = copper;
      126:  155:	  state->deckCount[i]++;		
      126:  156:	}
       18:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
       54:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  161:    {
       18:  162:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
       18:  166:    }
        -:  167:
        -:  168:  //draw player hands
       54:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  170:    {  
        -:  171:      //initialize hand size to zero
       18:  172:      state->handCount[i] = 0;
       18:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
       18:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
      504:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  183:    {
      243:  184:      state->embargoTokens[i] = 0;
      243:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
        9:  188:  state->outpostPlayed = 0;
        9:  189:  state->phase = 0;
        9:  190:  state->numActions = 1;
        9:  191:  state->numBuys = 1;
        9:  192:  state->playedCardCount = 0;
        9:  193:  state->whoseTurn = 0;
        9:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
      108:  198:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       45:  199:    drawCard(state->whoseTurn, state);
       45:  200:  }
        -:  201:
        9:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
        9:  204:  return 0;
        9:  205:}
        -:  206:
function shuffle called 1348 returned 100% blocks executed 100%
        -:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
     1348:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
     1348:  215:  if (state->deckCount[player] < 1)
branch  0 taken 98%
branch  1 taken 2%
     1317:  216:    return -1;
       31:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
     1904:  220:  while (state->deckCount[player] > 0) {
branch  0 taken 97%
branch  1 taken 3%
      921:  221:    card = floor(Random() * state->deckCount[player]);
      921:  222:    newDeck[newDeckPos] = state->deck[player][card];
      921:  223:    newDeckPos++;
    59172:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 97%
branch  1 taken 3%
    28665:  225:      state->deck[player][i] = state->deck[player][i+1];
    28665:  226:    }
      921:  227:    state->deckCount[player]--;
        -:  228:  }
     1904:  229:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 97%
branch  1 taken 3%
      921:  230:    state->deck[player][i] = newDeck[i];
      921:  231:    state->deckCount[player]++;
      921:  232:  }
        -:  233:
       31:  234:  return 0;
     1348:  235:}
        -:  236:
function playCard called 0 returned 0% blocks executed 0%
        -:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    #####:  275:  return 0;
    #####:  276:}
        -:  277:
function buyCard called 14 returned 100% blocks executed 75%
        -:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
       14:  286:  who = state->whoseTurn;
        -:  287:
       14:  288:  if (state->numBuys < 1){
branch  0 taken 0%
branch  1 taken 100%
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
       14:  292:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 0%
branch  1 taken 100%
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
       14:  296:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 0%
branch  1 taken 100%
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
       14:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
       14:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
       14:  305:    state->coins = (state->coins) - (getCost(supplyPos));
       14:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
       14:  314:  return 0;
       14:  315:}
        -:  316:
function numHandCards called 84 returned 100% blocks executed 100%
        -:  317:int numHandCards(struct gameState *state) {
       84:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
function handCard called 153 returned 100% blocks executed 100%
        -:  321:int handCard(int handPos, struct gameState *state) {
      153:  322:  int currentPlayer = whoseTurn(state);
      153:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
function supplyCount called 52 returned 100% blocks executed 100%
        -:  326:int supplyCount(int card, struct gameState *state) {
       52:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
function fullDeckCount called 3 returned 100% blocks executed 95%
        -:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
        3:  332:  int count = 0;
        -:  333:
       30:  334:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  335:    {
       15:  336:      if (state->deck[player][i] == card) count++;
branch  0 taken 25%
branch  1 taken 75%
       12:  337:    }
        -:  338:
       36:  339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  340:    {
       19:  341:      if (state->hand[player][i] == card) count++;
branch  0 taken 27%
branch  1 taken 73%
       15:  342:    }
        -:  343:
       18:  344:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  345:    {
        6:  346:      if (state->discard[player][i] == card) count++;
branch  0 taken 0%
branch  1 taken 100%
        6:  347:    }
        -:  348:
        3:  349:  return count;
        -:  350:}
        -:  351:
function whoseTurn called 281 returned 100% blocks executed 100%
        -:  352:int whoseTurn(struct gameState *state) {
      281:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
function endTurn called 14 returned 100% blocks executed 100%
        -:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
       14:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
      168:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17%
       70:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       70:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
       70:  365:  }
       14:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
       14:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 57%
branch  1 taken 43%
        8:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        8:  371:  }
        -:  372:  else{
        6:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
       14:  376:  state->outpostPlayed = 0;
       14:  377:  state->phase = 0;
       14:  378:  state->numActions = 1;
       14:  379:  state->coins = 0;
       14:  380:  state->numBuys = 1;
       14:  381:  state->playedCardCount = 0;
       14:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
      168:  386:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       70:  387:    drawCard(state->whoseTurn, state);//Draw a card
       70:  388:  }
        -:  389:
        -:  390:  //Update money
       14:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
       14:  393:  return 0;
        -:  394:}
        -:  395:
function isGameOver called 3 returned 100% blocks executed 100%
        -:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
        3:  401:  if (state->supplyCount[province] == 0)
branch  0 taken 33%
branch  1 taken 67%
        -:  402:    {
        1:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
        2:  407:  j = 0;
      104:  408:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  409:    {
       50:  410:      if (state->supplyCount[i] == 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  411:	{
        3:  412:	  j++;
        3:  413:	}
       50:  414:    }
        2:  415:  if ( j >= 3)
branch  0 taken 50%
branch  1 taken 50%
        -:  416:    {
        1:  417:      return 1;
        -:  418:    }
        -:  419:
        1:  420:  return 0;
        3:  421:}
        -:  422:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
function getWinners called 0 returned 0% blocks executed 0%
        -:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  474:	{
    #####:  475:	  players[i] = -9999;
    #####:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
    #####:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  488:	{
    #####:  489:	  j = i;
    #####:  490:	}
    #####:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  499:	{
    #####:  500:	  players[i]++;
    #####:  501:	}
    #####:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  509:	{
    #####:  510:	  j = i;
    #####:  511:	}
    #####:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  519:	{
    #####:  520:	  players[i] = 1;
    #####:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
    #####:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
function drawCard called 841 returned 100% blocks executed 100%
        -:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
      841:  534:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 79%
branch  1 taken 21%
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
     2776:  539:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 52%
branch  1 taken 48%
      720:  540:      state->deck[player][i] = state->discard[player][i];
      720:  541:      state->discard[player][i] = -1;
      720:  542:    }
        -:  543:
      668:  544:    state->deckCount[player] = state->discardCount[player];
      668:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
      668:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
      668:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
      668:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
      668:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
      668:  565:    if (deckCounter == 0)
branch  0 taken 99%
branch  1 taken 1%
      658:  566:      return -1;
        -:  567:
       10:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       10:  569:    state->deckCount[player]--;
       10:  570:    state->handCount[player]++;//Increment hand count
       10:  571:  }
        -:  572:
        -:  573:  else{
      173:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
      173:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
      173:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      173:  582:    state->deckCount[player]--;
      173:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
      183:  586:  return 0;
      841:  587:}
        -:  588:
function getCost called 56 returned 100% blocks executed 100%
        -:  589:int getCost(int cardNumber)
        -:  590:{
       56:  591:  switch( cardNumber ) 
branch  0 taken 2%
branch  1 taken 2%
branch  2 taken 2%
branch  3 taken 2%
branch  4 taken 2%
branch  5 taken 38%
branch  6 taken 2%
branch  7 taken 2%
branch  8 taken 2%
branch  9 taken 2%
branch 10 taken 2%
branch 11 taken 2%
branch 12 taken 2%
branch 13 taken 16%
branch 14 taken 2%
branch 15 taken 2%
branch 16 taken 2%
branch 17 taken 2%
branch 18 taken 2%
branch 19 taken 2%
branch 20 taken 2%
branch 21 taken 2%
branch 22 taken 2%
branch 23 taken 2%
branch 24 taken 2%
branch 25 taken 2%
branch 26 taken 2%
branch 27 taken 2%
        -:  592:    {
        -:  593:    case curse:
        1:  594:      return 0;
        -:  595:    case estate:
        1:  596:      return 2;
        -:  597:    case duchy:
        1:  598:      return 5;
        -:  599:    case province:
        1:  600:      return 8;
        -:  601:    case copper:
        1:  602:      return 0;
        -:  603:    case silver:
       21:  604:      return 3;
        -:  605:    case gold:
        1:  606:      return 6;
        -:  607:    case adventurer:
        1:  608:      return 6;
        -:  609:    case council_room:
        1:  610:      return 5;
        -:  611:    case feast:
        1:  612:      return 4;
        -:  613:    case gardens:
        1:  614:      return 4;
        -:  615:    case mine:
        1:  616:      return 5;
        -:  617:    case remodel:
        1:  618:      return 4;
        -:  619:    case smithy:
        9:  620:      return 4;
        -:  621:    case village:
        1:  622:      return 3;
        -:  623:    case baron:
        1:  624:      return 4;
        -:  625:    case great_hall:
        1:  626:      return 3;
        -:  627:    case minion:
        1:  628:      return 5;
        -:  629:    case steward:
        1:  630:      return 3;
        -:  631:    case tribute:
        1:  632:      return 5;
        -:  633:    case ambassador:
        1:  634:      return 3;
        -:  635:    case cutpurse:
        1:  636:      return 4;
        -:  637:    case embargo: 
        1:  638:      return 2;
        -:  639:    case outpost:
        1:  640:      return 5;
        -:  641:    case salvager:
        1:  642:      return 4;
        -:  643:    case sea_hag:
        1:  644:      return 4;
        -:  645:    case treasure_map:
        1:  646:      return 4;
        -:  647:    }
        -:  648:	
        1:  649:  return -1;
       56:  650:}
        -:  651:
function cardEffect called 16 returned 100% blocks executed 10%
        -:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
       16:  659:  int currentPlayer = whoseTurn(state);
       16:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
       16:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
       16:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
       16:  666:  int z = 0;// this is the counter for the temp hand
       16:  667:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  668:    nextPlayer = 0;
    #####:  669:  }
        -:  670:	
        -:  671:  //uses switch to select card and perform actions
       38:  672:  switch( card ) 
branch  0 taken 11%
branch  1 taken 11%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 5%
branch  7 taken 21%
branch  8 taken 21%
branch  9 taken 32%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  673:    {
        -:  674:    case adventurer:
        4:  675:      adventurerfunct(drawntreasure, state, currentPlayer, cardDrawn, z);
        -:  676:			
        -:  677:    case council_room:
        -:  678:      //+4 Cards
       40:  679:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  680:	{
       16:  681:	  drawCard(currentPlayer, state);
       16:  682:	}
        -:  683:			
        -:  684:      //+1 Buy
        4:  685:      state->numBuys++;
        -:  686:			
        -:  687:      //Each other player draws a card
       24:  688:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  689:	{
        8:  690:	  if ( i != currentPlayer )
branch  0 taken 50%
branch  1 taken 50%
        -:  691:	    {
        4:  692:	      drawCard(i, state);
        4:  693:	    }
        8:  694:	}
        -:  695:			
        -:  696:      //put played card in played card pile
        4:  697:      discardCard(handPos, currentPlayer, state, 0);
        -:  698:			
        4:  699:      return 0;
        -:  700:			
        -:  701:    case feast:
        -:  702:      //gain card with cost up to 5
        -:  703:      //Backup hand
    #####:  704:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  705:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  706:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  707:      }
        -:  708:      //Backup hand
        -:  709:
        -:  710:      //Update Coins for Buy
    #####:  711:      updateCoins(currentPlayer, state, 5);
    #####:  712:      x = 1;//Condition to loop on
    #####:  713:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  714:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  715:	  if (DEBUG)
        -:  716:	    printf("None of that card left, sorry!\n");
        -:  717:
        -:  718:	  if (DEBUG){
        -:  719:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  720:	  }
    #####:  721:	}
    #####:  722:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  723:	  printf("That card is too expensive!\n");
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  727:	  }
    #####:  728:	}
        -:  729:	else{
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:	  }
        -:  734:
    #####:  735:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  736:	  x = 0;//No more buying cards
        -:  737:
        -:  738:	  if (DEBUG){
        -:  739:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  740:	  }
        -:  741:
        -:  742:	}
        -:  743:      }     
        -:  744:
        -:  745:      //Reset Hand
    #####:  746:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  747:	state->hand[currentPlayer][i] = temphand[i];
    #####:  748:	temphand[i] = -1;
    #####:  749:      }
        -:  750:      //Reset Hand
        -:  751:      			
    #####:  752:      return 0;
        -:  753:			
        -:  754:    case gardens:
    #####:  755:      return -1;
        -:  756:			
        -:  757:    case mine:
    #####:  758:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  759:
    #####:  760:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:		
    #####:  765:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  771:	{
    #####:  772:	  return -1;
        -:  773:	}
        -:  774:
    #####:  775:      gainCard(choice2, state, 2, currentPlayer);
        -:  776:
        -:  777:      //discard card from hand
    #####:  778:      discardCard(handPos, currentPlayer, state, 0);
        -:  779:
        -:  780:      //discard trashed card
    #####:  781:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  782:	{
    #####:  783:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  784:	    {
    #####:  785:	      discardCard(i, currentPlayer, state, 0);			
    #####:  786:	      break;
        -:  787:	    }
    #####:  788:	}
        -:  789:			
    #####:  790:      return 0;
        -:  791:			
        -:  792:    case remodel:
    #####:  793:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  794:
    #####:  795:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  796:	{
    #####:  797:	  return -1;
        -:  798:	}
        -:  799:
    #####:  800:      gainCard(choice2, state, 0, currentPlayer);
        -:  801:
        -:  802:      //discard card from hand
    #####:  803:      discardCard(handPos, currentPlayer, state, 0);
        -:  804:
        -:  805:      //discard trashed card
    #####:  806:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  807:	{
    #####:  808:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  809:	    {
    #####:  810:	      discardCard(i, currentPlayer, state, 0);			
    #####:  811:	      break;
        -:  812:	    }
    #####:  813:	}
        -:  814:
        -:  815:
    #####:  816:      return 0;
        -:  817:		
        -:  818:    case smithy:
        2:  819:      smithyfunct(currentPlayer, state, handPos);
        -:  820:     
        -:  821:		
        -:  822:    case village:
        8:  823:      villagefunct(currentPlayer, state, handPos);
        -:  824:		
        -:  825:    case baron:
        8:  826:      baronfunct(currentPlayer, state, handPos, choice1);
        -:  827:		
        -:  828:    case great_hall:
        -:  829:      //+1 Card
       12:  830:      drawCard(currentPlayer, state);
        -:  831:			
        -:  832:      //+1 Actions
       12:  833:      state->numActions++;
        -:  834:			
        -:  835:      //discard card from hand
       12:  836:      discardCard(handPos, currentPlayer, state, 0);
       12:  837:      return 0;
        -:  838:		
        -:  839:    case minion:
    #####:  840:      minionfunct(currentPlayer, state, handPos, choice1, choice2);
        -:  841:		
        -:  842:    case steward:
    #####:  843:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  844:	{
        -:  845:	  //+2 cards
    #####:  846:	  drawCard(currentPlayer, state);
    #####:  847:	  drawCard(currentPlayer, state);
    #####:  848:	}
    #####:  849:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  850:	{
        -:  851:	  //+2 coins
    #####:  852:	  state->coins = state->coins + 2;
    #####:  853:	}
        -:  854:      else
        -:  855:	{
        -:  856:	  //trash 2 cards in hand
    #####:  857:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  858:	  discardCard(choice3, currentPlayer, state, 1);
        -:  859:	}
        -:  860:			
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
    #####:  863:      return 0;
        -:  864:		
        -:  865:    case tribute:
    #####:  866:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  867:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  868:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  869:	  state->deckCount[nextPlayer]--;
    #####:  870:	}
    #####:  871:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  872:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  873:	  state->discardCount[nextPlayer]--;
    #####:  874:	}
        -:  875:	else{
        -:  876:	  //No Card to Reveal
        -:  877:	  if (DEBUG){
        -:  878:	    printf("No cards to reveal\n");
        -:  879:	  }
        -:  880:	}
    #####:  881:      }
        -:  882:	    
        -:  883:      else{
    #####:  884:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  885:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  886:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  887:	    state->deckCount[nextPlayer]++;
    #####:  888:	    state->discard[nextPlayer][i] = -1;
    #####:  889:	    state->discardCount[nextPlayer]--;
    #####:  890:	  }
        -:  891:			    
    #####:  892:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  893:	} 
    #####:  894:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  895:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  896:	state->deckCount[nextPlayer]--;
    #####:  897:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  898:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  899:	state->deckCount[nextPlayer]--;
        -:  900:      }    
        -:  901:		       
    #####:  902:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  903:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  904:	state->playedCardCount++;
    #####:  905:	tributeRevealedCards[1] = -1;
    #####:  906:      }
        -:  907:
    #####:  908:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  909:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  910:	  state->coins += 2;
    #####:  911:	}
        -:  912:		    
    #####:  913:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  914:	  drawCard(currentPlayer, state);
    #####:  915:	  drawCard(currentPlayer, state);
    #####:  916:	}
        -:  917:	else{//Action Card
    #####:  918:	  state->numActions = state->numActions + 2;
        -:  919:	}
    #####:  920:      }
        -:  921:	    
    #####:  922:      return 0;
        -:  923:		
        -:  924:    case ambassador:
    #####:  925:      j = 0;		//used to check if player has enough cards to discard
        -:  926:
    #####:  927:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  928:	{
    #####:  929:	  return -1;				
        -:  930:	}
        -:  931:
    #####:  932:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  933:	{
    #####:  934:	  return -1;
        -:  935:	}
        -:  936:
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  940:	    {
    #####:  941:	      j++;
    #####:  942:	    }
    #####:  943:	}
    #####:  944:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  return -1;				
        -:  947:	}
        -:  948:
        -:  949:      if (DEBUG) 
        -:  950:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  951:
        -:  952:      //increase supply count for choosen card by amount being discarded
    #####:  953:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  954:			
        -:  955:      //each other player gains a copy of revealed card
    #####:  956:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  957:	{
    #####:  958:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  959:	    {
    #####:  960:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  961:	    }
    #####:  962:	}
        -:  963:
        -:  964:      //discard played card from hand
    #####:  965:      discardCard(handPos, currentPlayer, state, 0);			
        -:  966:
        -:  967:      //trash copies of cards returned to supply
    #####:  968:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  969:	{
    #####:  970:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  971:	    {
    #####:  972:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  973:		{
    #####:  974:		  discardCard(i, currentPlayer, state, 1);
    #####:  975:		  break;
        -:  976:		}
    #####:  977:	    }
    #####:  978:	}			
        -:  979:
    #####:  980:      return 0;
        -:  981:		
        -:  982:    case cutpurse:
        -:  983:
    #####:  984:      updateCoins(currentPlayer, state, 2);
    #####:  985:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  986:	{
    #####:  987:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  988:	    {
    #####:  989:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  990:		{
    #####:  991:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  992:		    {
    #####:  993:		      discardCard(j, i, state, 0);
    #####:  994:		      break;
        -:  995:		    }
    #####:  996:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  997:		    {
    #####:  998:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  999:			{
        -: 1000:			  if (DEBUG)
        -: 1001:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1002:			}	
    #####: 1003:		      break;
        -: 1004:		    }		
    #####: 1005:		}
        -: 1006:					
    #####: 1007:	    }
        -: 1008:				
    #####: 1009:	}				
        -: 1010:
        -: 1011:      //discard played card from hand
    #####: 1012:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1013:
    #####: 1014:      return 0;
        -: 1015:
        -: 1016:		
        -: 1017:    case embargo: 
        -: 1018:      //+2 Coins
    #####: 1019:      state->coins = state->coins + 2;
        -: 1020:			
        -: 1021:      //see if selected pile is in play
    #####: 1022:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  return -1;
        -: 1025:	}
        -: 1026:			
        -: 1027:      //add embargo token to selected supply pile
    #####: 1028:      state->embargoTokens[choice1]++;
        -: 1029:			
        -: 1030:      //trash card
    #####: 1031:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case outpost:
        -: 1035:      //set outpost flag
    #####: 1036:      state->outpostPlayed++;
        -: 1037:			
        -: 1038:      //discard card
    #####: 1039:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1040:      return 0;
        -: 1041:		
        -: 1042:    case salvager:
        -: 1043:      //+1 buy
    #####: 1044:      state->numBuys++;
        -: 1045:			
    #####: 1046:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
        -: 1048:	  //gain coins equal to trashed card
    #####: 1049:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1050:	  //trash card
    #####: 1051:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1052:	}
        -: 1053:			
        -: 1054:      //discard card
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case sea_hag:
    #####: 1059:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1060:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1061:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1062:	  state->discardCount[i]++;
    #####: 1063:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1064:	}
    #####: 1065:      }
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case treasure_map:
        -: 1069:      //search hand for another treasure_map
    #####: 1070:      index = -1;
    #####: 1071:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1072:	{
    #####: 1073:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1074:	    {
    #####: 1075:	      index = i;
    #####: 1076:	      break;
        -: 1077:	    }
    #####: 1078:	}
    #####: 1079:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1080:	{
        -: 1081:	  //trash both treasure cards
    #####: 1082:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1083:	  discardCard(index, currentPlayer, state, 1);
        -: 1084:
        -: 1085:	  //gain 4 Gold cards
    #####: 1086:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1087:	    {
    #####: 1088:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1089:	    }
        -: 1090:				
        -: 1091:	  //return success
    #####: 1092:	  return 1;
        -: 1093:	}
        -: 1094:			
        -: 1095:      //no second treasure_map found in hand
    #####: 1096:      return -1;
        -: 1097:    }
        -: 1098:	
    #####: 1099:  return -1;
       16: 1100:}
        -: 1101:
function discardCard called 26 returned 100% blocks executed 80%
        -: 1102:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1103:{
        -: 1104:	
        -: 1105:  //if card is not trashed, added to Played pile 
       26: 1106:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1107:    {
        -: 1108:      //add card to played pile
       26: 1109:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       26: 1110:      state->playedCardCount++;
       26: 1111:    }
        -: 1112:	
        -: 1113:  //set played card to -1
       26: 1114:  state->hand[currentPlayer][handPos] = -1;
        -: 1115:	
        -: 1116:  //remove card from player's hand
       26: 1117:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1118:    {
        -: 1119:      //reduce number of cards in hand
    #####: 1120:      state->handCount[currentPlayer]--;
    #####: 1121:    }
       26: 1122:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1123:    {
        -: 1124:      //reduce number of cards in hand
    #####: 1125:      state->handCount[currentPlayer]--;
    #####: 1126:    }
        -: 1127:  else 	
        -: 1128:    {
        -: 1129:      //replace discarded card with last card in hand
       26: 1130:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1131:      //set last card to -1
       26: 1132:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1133:      //reduce number of cards in hand
       26: 1134:      state->handCount[currentPlayer]--;
        -: 1135:    }
        -: 1136:	
       26: 1137:  return 0;
        -: 1138:}
        -: 1139:
function gainCard called 22 returned 100% blocks executed 72%
        -: 1140:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1141:{
        -: 1142:  //Note: supplyPos is enum of choosen card
        -: 1143:	
        -: 1144:  //check if supply pile is empty (0) or card is not used in game (-1)
       22: 1145:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1146:    {
    #####: 1147:      return -1;
        -: 1148:    }
        -: 1149:	
        -: 1150:  //added card for [whoseTurn] current player:
        -: 1151:  // toFlag = 0 : add to discard
        -: 1152:  // toFlag = 1 : add to deck
        -: 1153:  // toFlag = 2 : add to hand
        -: 1154:
       22: 1155:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1156:    {
    #####: 1157:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1158:      state->deckCount[player]++;
    #####: 1159:    }
       22: 1160:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1161:    {
    #####: 1162:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1163:      state->handCount[player]++;
    #####: 1164:    }
        -: 1165:  else
        -: 1166:    {
       22: 1167:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       22: 1168:      state->discardCount[player]++;
        -: 1169:    }
        -: 1170:	
        -: 1171:  //decrease number in supply pile
       22: 1172:  state->supplyCount[supplyPos]--;
        -: 1173:	 
       22: 1174:  return 0;
       22: 1175:}
        -: 1176:
function updateCoins called 23 returned 100% blocks executed 92%
        -: 1177:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1178:{
        -: 1179:  int i;
        -: 1180:	
        -: 1181:  //reset coin count
       23: 1182:  state->coins = 0;
        -: 1183:
        -: 1184:  //add coins for each Treasure card in player's hand
      276: 1185:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1186:    {
      115: 1187:      if (state->hand[player][i] == copper)
branch  0 taken 74%
branch  1 taken 26%
        -: 1188:	{
       85: 1189:	  state->coins += 1;
       85: 1190:	}
       30: 1191:      else if (state->hand[player][i] == silver)
branch  0 taken 13%
branch  1 taken 87%
        -: 1192:	{
        4: 1193:	  state->coins += 2;
        4: 1194:	}
       26: 1195:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1196:	{
    #####: 1197:	  state->coins += 3;
    #####: 1198:	}	
      115: 1199:    }	
        -: 1200:
        -: 1201:  //add bonus
       23: 1202:  state->coins += bonus;
        -: 1203:
       23: 1204:  return 0;
        -: 1205:}
        -: 1206:
function smithyfunct called 2 returned 100% blocks executed 100%
        -: 1207:void smithyfunct(int currentPlayer, struct gameState *state, int handPos)
        -: 1208:{
       20: 1209:  for (int i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20%
        -: 1210:  {
        8: 1211:    drawCard(currentPlayer, state);
        8: 1212:  }
        -: 1213:  //discard card from hand
        2: 1214:    discardCard(handPos-1, currentPlayer, state, 0);
        2: 1215:    return;
        -: 1216:}
        -: 1217:
function adventurerfunct called 4 returned 100% blocks executed 100%
        -: 1218:void adventurerfunct(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int z){
        -: 1219:  int temphand[MAX_HAND-3];
     1364: 1220:  while(drawntreasure<2){
branch  0 taken 99%
branch  1 taken 1%
      678: 1221:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 97%
branch  1 taken 3%
      658: 1222:      shuffle(currentPlayer, state);
      658: 1223:    }
      678: 1224:    drawCard(currentPlayer, state);
      678: 1225:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     1356: 1226:    if (cardDrawn == gold || cardDrawn == silver)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 1%
branch  3 taken 99%
        8: 1227:      drawntreasure++;
        -: 1228:    else{
      670: 1229:      temphand[z]=cardDrawn;
      670: 1230:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      670: 1231:      z++;
        -: 1232:    }
        -: 1233:     }
     1348: 1234:    while(z-1>=0){
branch  0 taken 99%
branch  1 taken 1%
      670: 1235:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      670: 1236:    z=z-1;
        -: 1237:      }
        4: 1238:    return;
        -: 1239:}
        -: 1240:
function villagefunct called 8 returned 100% blocks executed 100%
        -: 1241:void villagefunct(int currentPlayer, struct gameState *state, int handPos){
        -: 1242:  //+1 Card
        8: 1243:    drawCard(currentPlayer, state);
        -: 1244:      
        -: 1245:    //+2 Actions
        8: 1246:    state->numActions = state->numActions + 6;
        -: 1247:      
        -: 1248:    //discard played card from hand
        8: 1249:    discardCard(handPos, currentPlayer, state, 0);
        8: 1250:    return;
        -: 1251:}
        -: 1252:
function baronfunct called 8 returned 100% blocks executed 26%
        -: 1253:void baronfunct(int currentPlayer, struct gameState *state, int handPos, int choice1){
        8: 1254:  state->numBuys--;//Increase buys by 1!
        8: 1255:    if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0%
branch  1 taken 100%
    #####: 1256:    int p = 10;//Iterator for hand!
    #####: 1257:    int card_not_discarded = 1;//Flag for discard set!
    #####: 1258:    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1259:      if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1260:          state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1261:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1262:          state->discardCount[currentPlayer]++;
    #####: 1263:          for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1264:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1265:          }
    #####: 1266:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1267:          state->handCount[currentPlayer]--;
    #####: 1268:          card_not_discarded = 0;//Exit the loop
    #####: 1269:        }
    #####: 1270:        else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1271:          if(DEBUG) {
        -: 1272:            printf("No estate cards in your hand, invalid choice\n");
        -: 1273:            printf("Must gain an estate if there are any\n");
        -: 1274:          }
    #####: 1275:          if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####: 1276:            gainCard(estate, state, 0, currentPlayer);
    #####: 1277:            state->supplyCount[estate]--;//Decrement estates
    #####: 1278:            if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####: 1279:            isGameOver(state);
    #####: 1280:              }
    #####: 1281:          }
    #####: 1282:          card_not_discarded = 0;//Exit the loop
    #####: 1283:      }       
        -: 1284:        else{
    #####: 1285:          p++;//Next card
        -: 1286:        }
        -: 1287:    }
    #####: 1288:    }
        -: 1289:          
        -: 1290:    else{
        8: 1291:    if (supplyCount(estate, state) > 0){
branch  0 taken 100%
branch  1 taken 0%
        8: 1292:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
        8: 1293:        state->supplyCount[estate]--;//Decrement Estates
        8: 1294:        if (supplyCount(estate, state) == 0){
branch  0 taken 0%
branch  1 taken 100%
    #####: 1295:          isGameOver(state);
    #####: 1296:        }
        8: 1297:    } 
        -: 1298:    }
        -: 1299:      
        8: 1300:    return;
        -: 1301:}
        -: 1302:
function minionfunct called 0 returned 0% blocks executed 0%
        -: 1303:void minionfunct(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2){
        -: 1304:  //+1 action
    #####: 1305:    state->numActions++;
        -: 1306:  
        -: 1307:    //discard card from hand
    #####: 1308:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1309:  if (choice1)    //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1310:  {
    #####: 1311:    state->coins = state->coins + 2;
    #####: 1312:  }
        -: 1313:      
    #####: 1314:    else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1315:  {
        -: 1316:    //discard hand
    #####: 1317:    while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1318:      {
    #####: 1319:        discardCard(handPos, currentPlayer, state, 0);
        -: 1320:      }
        -: 1321:        
        -: 1322:      //draw 4
    #####: 1323:      for (int i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1324:      {
    #####: 1325:        drawCard(currentPlayer, state);
    #####: 1326:      }
        -: 1327:        
        -: 1328:      //other players discard hand and redraw if hand size > 4
    #####: 1329:      for (int i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1330:      {
    #####: 1331:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1332:      {
    #####: 1333:        if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1334:          {
        -: 1335:          //discard hand
    #####: 1336:            while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1337:          {
    #####: 1338:            discardCard(handPos, i, state, 0);
        -: 1339:          }
        -: 1340:              
        -: 1341:            //draw 4
    #####: 1342:              for (int j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1343:          {
    #####: 1344:              drawCard(i, state);
    #####: 1345:          }
    #####: 1346:          }
    #####: 1347:      }
    #####: 1348:    }
        -: 1349:        
    #####: 1350:  }
    #####: 1351:    return;
        -: 1352:    
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
