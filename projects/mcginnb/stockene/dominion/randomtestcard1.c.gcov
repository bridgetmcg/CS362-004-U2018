        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Bridget McGinn
        -:    2://Note: I used the code framework from TestDrawCard.c to outline my random testing
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include <string.h>
        -:    7:#include <stdio.h>
        -:    8:#include <assert.h>
        -:    9:#include "rngs.h"
        -:   10:#include <stdlib.h>
        -:   11:#include <time.h>
        -:   12:#include <math.h>
        -:   13:
        -:   14:#define TESTCARD "smithy"
        -:   15:
        -:   16:int smithyFail = 0;												//Define the failure counters as global variables
        -:   17:int drawCardFail = 0;
        -:   18:int discardFail = 0;
        -:   19:
        -:   20:void checkSmithyCard(int p, struct gameState *post) {
        -:   21:  struct gameState pre;
        -:   22:  memcpy (&pre, post, sizeof(struct gameState));
     1000:   23:  int r, m, j;
        -:   24:  int bonus = 0;
     1000:   25:  r = cardEffect(smithy, 0, 0, 0, post, 0, &bonus);				//Call cardEffect on the post gamestate
     1000:   26:  m = drawCard(p, &pre);										//Draw three cards as expected on the pre gamestate
     1000:   27:  m = drawCard(p, &pre);
     1000:   28:  m = drawCard(p, &pre);
     1000:   29:  j = discardCard(0, p, &pre, 0);								//Discard one card as expected on the pre gamestate
     1000:   30:
        -:   31:  if (m==-1)
     1000:   32:  {
        -:   33:  		drawCardFail++;											//If the drawCard function was the issue
    #####:   34:  }
    #####:   35:  if(j==-1)
     1000:   36:  {
        -:   37:  		discardFail++;											//If the discard funciton was the issue
    #####:   38:  }
    #####:   39:  if (r!=0)
     1000:   40:  {
        -:   41:  		smithyFail++;									
    #####:   42:  }
    #####:   43: 
        -:   44:  if (pre.handCount[p] != post->handCount[p] || pre.deckCount[p] != post->deckCount[p])
     1000:   45:  {
        -:   46:  		smithyFail++;											//Check if the three cards were correctly added
     1000:   47:  }
     1000:   48:
        -:   49:}
     1000:   50:
        -:   51:int main () {
        -:   52:
        -:   53:  printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        1:   54:
        -:   55:  int i, n, p;
        -:   56:  struct gameState G;
        -:   57:  printf ("RANDOM TESTS running 1000 times.\n");
        1:   58:  SelectStream(2);
        1:   59:  PutSeed(3);
        1:   60:
        -:   61:  for (n = 0; n < 1000; n++) {									//Set up 1000 forms of the gamestate
     2002:   62:    for (i = 0; i < sizeof(struct gameState); i++) {
 52602000:   63:      ((char*)&G)[i] = floor(Random() * 256);
 26300000:   64:    }
 26300000:   65:    p = floor(Random() * MAX_PLAYERS);
     1000:   66:    G.deckCount[p] = floor(Random() * MAX_DECK);
     1000:   67:    G.discardCount[p] = floor(Random() * MAX_DECK);
     1000:   68:    G.handCount[p] = floor(Random() * MAX_HAND);
     1000:   69:    G.playedCardCount = floor(Random() * MAX_DECK -1);
     1000:   70:    G.whoseTurn = p;
     1000:   71:    checkSmithyCard(p, &G);										//Call the check function
     1000:   72:  }
     1000:   73:
        -:   74:  if (smithyFail + discardFail + drawCardFail == 0)				//Display the results as passed if there are no errors
        1:   75:  {
        -:   76:  	printf("ALL RANDOM TESTS PASSED\n");
    #####:   77:  }
    #####:   78:  else 
        -:   79:  {
        -:   80:  	printf("TEST FAILURES\n");
        1:   81:  	printf("smithyFails = %d \n", smithyFail);
        1:   82:  	printf("drawCardFail = %d \n", drawCardFail);
        1:   83:  	printf("discardFail = %d \n", discardFail);
        1:   84:  	
        -:   85:  }
        -:   86:  return 0;
        1:   87:}
